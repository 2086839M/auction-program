Collect all the files into the same directory. Then, open a terminal for the server and a separate terminal for each client you want, in the directory, and run “javac *.java” to compile all the files. FIrst run the rmiregistry (rmiregistry &) (linux) then run the auction server by running “java AuctionServer” and the client/s by running “java AuctionClient”. The performance tester can be run using “java AuctionTestClient” (do this with only two terminals, one for the server and the other for the AuctionTestClient). When the client is run, enter a name at the prompt in order to create the user. You are then presented with 5 options. “Create an auction item” will ask for an item name, minimum value and how long you want the auction to last for(in seconds). “Bid on an item” will ask for a item ID and the amount you want to bid. “View current auctions” will list all the items in the auction. “Initialise auction from external file” will read the external file and populate the auction with items. You can modify the items that are read in by editing the items.txt file. The first column denotes the item name, second column its minimum value and third column how long it should stay open for(in seconds). Choosing “Exit” will close the client.

As it is, the system is set up for an environment where the server and clients will be run on the same machine, using different terminal processes for the server and each client. This can be changed by editing the localhost value in the AuctionClient, to allow for the client to be run on a different machine.
